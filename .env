PORT=9000
 const socket = io();
        let username, roomCode, clientId;

        // Handling name input and chat start
        document.getElementById('start-chat').addEventListener('click', () => {
            username = document.getElementById('username').value.trim();
            if (username) {
                document.getElementById('username-container').style.display = 'none';
                document.getElementById('code-container').style.display = 'block';
            }
        });

        // Generate Room Code
        document.getElementById('generate-code').addEventListener('click', () => {
            roomCode = Math.random().toString(36).substr(2, 8); // Generate random 8-char code
            document.getElementById('generated-code').textContent = roomCode;
            socket.emit('create room', roomCode);
            switchToChat();
        });

        // Join Existing Chat Room
        document.getElementById('join-chat').addEventListener('click', () => {
            roomCode = document.getElementById('join-code').value.trim();
            if (roomCode) {
                socket.emit('join room', roomCode, username);
            }
        });

        // Switch to Chat Window
        function switchToChat() {
            document.getElementById('code-container').style.display = 'none';
            document.getElementById('chat-container').style.display = 'flex';
            document.querySelector('.header .contact-name').textContent = `Chat Room: ${roomCode}`;
            clientId = socket.id;
        }

        // Handle Incoming Chat Messages
        const messages = document.getElementById('messages');

        socket.on('joined room', (code) => {
            roomCode = code;
            switchToChat();
        });

        socket.on('chat message', (data) => {
            const messageElement = document.createElement('div');
            messageElement.classList.add('message');
            messageElement.classList.add(data.senderId === clientId ? 'sent' : 'received');
            messageElement.innerHTML = `<div class="username">${data.username}</div><p>${data.message}</p><small>${data.timestamp}</small>`;
            messages.appendChild(messageElement);
            messages.scrollTop = messages.scrollHeight;
        });

        socket.on('image message', (data) => {
            const messageElement = document.createElement('div');
            messageElement.classList.add('message');
            messageElement.classList.add(data.senderId === clientId ? 'sent' : 'received');
            messageElement.innerHTML = `<div class="username">${data.username}</div><img src="${data.image}" style="max-width: 100%; border-radius: 10px;"><small>${data.timestamp}</small>`;
            messages.appendChild(messageElement);
            messages.scrollTop = messages.scrollHeight;
        });

        // Send Message
        document.getElementById('send-button').addEventListener('click', () => {
            const messageInput = document.getElementById('input');
            const message = messageInput.value.trim();
            if (message) {
                const messageData = {
                    username: username,
                    message: message,
                    timestamp: new Date().toLocaleTimeString(),
                    roomCode: roomCode,
                    senderId: clientId
                };
                socket.emit('chat message', messageData);
                messageInput.value = '';
            }
        });

        // Handle Image Upload
        document.getElementById('image-button').addEventListener('click', () => {
            document.getElementById('image-input').click();
        });

        document.getElementById('image-input').addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = () => {
                    const imageData = {
                        username: username,
                        image: reader.result,
                        timestamp: new Date().toLocaleTimeString(),
                        roomCode: roomCode,
                        senderId: clientId
                    };
                    socket.emit('image message', imageData);
                };
                reader.readAsDataURL(file);
            }
        });

        // Emoji Picker
        const emojiButton = document.getElementById('emoji-button');
        const emojiPicker = document.querySelector('emoji-picker');

        emojiButton.addEventListener('click', () => {
            emojiPicker.style.display = emojiPicker.style.display === 'none' ? 'block' : 'none';            
        });

        emojiPicker.addEventListener('emoji-click', (event) => {
            const input = document.getElementById('input');
            input.value += event.detail.unicode;
            emojiPicker.style.display = 'none'; // Hide picker after selection
        });

        // Close emoji picker when clicking outside
        document.addEventListener('click', (event) => {
            if (!emojiPicker.contains(event.target) && event.target !== emojiButton) {
                emojiPicker.style.display = 'none';
            }
        });